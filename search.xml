<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[PHP utf-8等宽字符串截取]]></title>
      <url>%2Fpost%2Fphp%2F2016-12-31-PHP-utf8_substr.html</url>
      <content type="text"><![CDATA[网站等宽等像素值展示内容 UTF-8是1-4字节变长编码，中文都是3字节，截取UTF8编码字符串从首字节开始指定宽度(非长度), 现有的函数只能使用mb_substr这样的针对编码的截取方式，但是这种处理，在全中文与全英文截取差异很大，会出现参差不齐的效果。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;?php/** * * @param string $str UTF-8 encoding * @param int[option] $width 截取宽度 * @param string[option] $end 被截取后追加的尾字符 * @param float[option] $x3 * 3字节（中文）字符相当于希腊字母宽度的系数coefficient（小数） * 中文通常固定用宋体,根据ascii字符字体宽度设定,不同浏览器可能会有不同显示效果 * @return string */ function utf8_substr($str, $width = 0, $end = &apos;...&apos;, $x3 = 0) &#123; global $CFG; // 全局变量保存 x3 的值 if ($width &lt;= 0 || $width &gt;= strlen($str)) &#123; return $str; &#125; // 中文占3个字节 $arr = str_split($str); $len = count($arr); // 实际字符串宽度 $strWidth = 0; $width *= 10; // 不同字节编码字符宽度系数 $x1 = 11; // ASCII $x2 = 16; $x3 = $x3===0 ? ( $CFG[&apos;cf3&apos;] &gt; 0 ? $CFG[&apos;cf3&apos;]*10 : $x3 = 21 ) : $x3*10; $x4 = $x3; $endStr = &apos;&apos;; $offset = 0; for ($offset = 0; $offset &lt; $len; $offset++) &#123; if ($strWidth &gt;= $width) &#123; $endStr = $end; break; &#125; // 根据返回整型的 ASCII 码值判断字符宽度 $character = ord($arr[$offset]); if ($character &lt;= 127) &#123; $strWidth += $x1; &#125; elseif ($character &gt;= 192 &amp;&amp; $character &lt;= 223) &#123; // 2字节头 $strWidth += $x2; $offset += 1; &#125; elseif ($character &gt;= 224 &amp;&amp; $character &lt;= 239) &#123; // 3字节头 $strWidth += $x3; $offset += 2; &#125; elseif ($character &gt;= 240 &amp;&amp; $character &lt;= 247) &#123; // 4字节头 $strWidth += $x4; $offset += 3; &#125; &#125; return implode(&apos;&apos;, array_slice($arr, 0, $offset) ). $endStr; &#125;// test$str1 = &apos;Celine Dion My Love Ultimate Essential Collection My Heart Will Go On&apos;;$str2 = &apos;一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十&apos;;$str3 = &apos;一二dfd九十&apos;;echo &quot;&lt;br /&gt;&quot;;echo utf8_substr($str1, 10);echo &quot;&lt;hr /&gt;&quot;;echo utf8_substr($str2, 10);echo &quot;&lt;hr /&gt;&quot;;echo utf8_substr($str3, 10); 参考]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Http常用状态码]]></title>
      <url>%2Fpost%2Fhttp%2F2016-12-15-http-status-code.html</url>
      <content type="text"><![CDATA[2XX：请求正常处理并返回 3XX：重定向，请求的资源位置发生变化 4XX：客户端发送的请求有错误 5XX：服务器端错误 在 HTTP API 设计中，经常用到的状态码以及它们的意义如下表： 状态码 Label 解释 200 OK 请求成功接收并处理，一般响应中都会有 body 201 Created 请求已完成，并导致了一个或者多个资源被创建，最常用在 POST 创建资源的时候 202 Accepted 请求已经接收并开始处理，但是处理还没有完成。一般用在异步处理的情况，响应 body 中应该告诉客户端去哪里查看任务的状态 204 No Content 请求已经处理完成，但是没有信息要返回，经常用在 PUT 更新资源的时候（客户端提供资源的所有属性，因此不需要服务端返回）。如果有重要的 metadata，可以放到头部返回 301 Moved Permanently 请求的资源已经永久性地移动到另外一个地方，后续所有的请求都应该直接访问新地址。服务端会把新地址写在 Location 头部字段，方便客户端使用。允许客户端把 POST 请求修改为 GET。 304 Not Modified 请求的资源和之前的版本一样，没有发生改变。用来缓存资源，和条件性请求（conditional request）一起出现 307 Temporary Redirect 目标资源暂时性地移动到新的地址，客户端需要去新地址进行操作，但是不能修改请求的方法。 308 Permanent Redirect 和 301 类似，除了客户端不能修改原请求的方法 400 Bad Requests 客户端发送的请求有错误（请求语法错误，body 数据格式有误，body 缺少必须的字段等），导致服务端无法处理 401 Unauthorized 请求的资源需要认证，客户端没有提供认证信息或者认证信息不正确 403 Forbidden 服务器端接收到并理解客户端的请求，但是客户端的权限不足。比如，普通用户想操作只有管理员才有权限的资源。 404 Not Found 客户端要访问的资源不存在，链接失效或者客户端伪造 URL 的时候回遇到这个情况 405 Method Not Allowed 服务端接收到了请求，而且要访问的资源也存在，但是不支持对应的方法。服务端必须返回 Allow 头部，告诉客户端哪些方法是允许的 415 Unsupported Media Type 服务端不支持客户端请求的资源格式，一般是因为客户端在 Content-Type 或者 Content-Encoding 中申明了希望的返回格式，但是服务端没有实现。比如，客户端希望收到 xml返回，但是服务端支持 Json 429 Too Many Requests 客户端在规定的时间里发送了太多请求，在进行限流的时候会用到 500 Internal Server Error 服务器内部错误，导致无法完成请求的内容 503 Service Unavailable 服务器因为负载过高或者维护，暂时无法提供服务。服务器端应该返回 Retry-After 头部，告诉客户端过一段时间再来重试 上面这些状态码覆盖了 API 设计中大部分的情况，如果对某个状态码不清楚或者希望查看更完整的列表，可以参考 HTTP Status Code 这个网站，或者 RFC7231 Response Status Codes 的内容。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery:hover延时效果的一些处理]]></title>
      <url>%2Fpost%2Fjavascript%2F2016-12-08-jquery-hover.html</url>
      <content type="text"><![CDATA[一开始鼠标的hover事件我都会用css:hover伪类来实现，它的特点也很明显，就是无延时立即触发，但有时可能会造成一些干扰，想要用户体验更好的话就要用js。比如，让鼠标在元素上停留规定时间内才触发hover事件。我在一篇博文上找到一段比较好的处理代码 ：文章出处1234567891011121314151617181920212223242526272829303132333435363738394041(function($)&#123; $.fn.hoverDelay = function(options)&#123; var defaults = &#123; // 鼠标经过的延时时间 hoverDuring: 200, // 鼠标移出的延时时间 outDuring: 200, // 鼠标经过执行的方法 hoverEvent: function()&#123; // 设置为空函数，绑定的时候由使用者定义 $.noop(); &#125;, // 鼠标移出执行的方法 outEvent: function()&#123; $.noop(); &#125; &#125;; var sets = $.extend(defaults,options || &#123;&#125;); var hoverTimer, outTimer; return $(this).each(function()&#123; $(this).hover(function()&#123; // 清除定时器 clearTimeout(outTimer); hoverTimer = setTimeout(sets.hoverEvent, sets.hoverDuring); &#125;, function()&#123; clearTimeout(hoverTimer); outTimer = setTimeout(sets.outEvent, sets.outDuring); &#125;); &#125;); &#125; &#125;)(jQuery); // 具体使用，给id为“#test”的元素添加hoverEvent事件 $(&quot;#test&quot;).hoverDelay(&#123; // 自定义，outEvent同 hoverEvent: function()&#123; alert(&quot;经过我！&quot;); &#125; &#125;); 这段代码好在于把鼠标经过事件和延时分离出来，延时以及延迟的清除都交由hoverDelay来处理，具体hover事件自己自定，是一段能够很通用的代码。但运用起来还有些小问题，在自定义hoverEvent、outEvent中使用this的话，它所指向的是window这个对象，而不是当前上下文，所以我改进了下，通过apply()来实现this绑定。改进部分：12345678910111213141516return $(this).each(function()&#123; // 保存当前上下文的this对象 var $this = $(this) $this.hover(function()&#123; clearTimeout(outTimer); hoverTimer = setTimeout(function () &#123; // 调用替换 sets.hoverEvent.apply($this); &#125;, sets.hoverDuring); &#125;, function()&#123; clearTimeout(hoverTimer); outTimer = setTimeout(function () &#123; sets.outEvent.apply($this); &#125;, sets.outDuring); &#125;); &#125;); 改完以后我自己的小项目都用这个方法来处理hover或者其他的延时效果了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo-next主题配置]]></title>
      <url>%2Fpost%2Fblog%2F2016-12-08-hexo-next.html</url>
      <content type="text"><![CDATA[hexo还有一个好处就是拥有很多漂亮的主题，其中我选择了next，然后把配置过程中遇到的一些问题写下来备忘。 设置「阅读全文」有三种方式： 在文章中使用 &lt;!-- more --&gt; 手动进行截断，Hexo 提供的方式 在文章的 front-matter 中添加 description，并提供文章摘录 自动形成摘要，在 主题配置文件 中添加： 添加标签页（categories和tags）123456$ hexo new page tags$ hexo new page categories$ vim source/tags/index.md ### add line: type: &quot;tags&quot;$ vim source/categories/index.md### add line: type: &quot;categories&quot; 原理：分别在 source 下生成 tags 和 categories 文件夹，并在里面的文件中分别添加一行代码之后就可以访问 /tags/index.html 页面。（如有问题可尝试一下步骤）1.删除 db.json2.hexo clean3.hexo g 参考next官方手册]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo搭建个人博客]]></title>
      <url>%2Fpost%2Fblog%2F2016-12-07-hexo-blog.html</url>
      <content type="text"><![CDATA[选择hexo通过 Github Pages直接写的HTML静态博客维护起来相当麻烦，相当累人，所以我在网上了解到目前一些比较流行的两个静态博客框架Jekyll和Hexo。两者的区别：Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。Jekyll没有本地服务器，无法实现本地博文预览功能，需要上传到WEB容器中才能预览功能，而Hexo可以通过简单的命令实现本地的预览，并直接发布到WEB容器中实现同步。因为我电脑上装了nodejs，就直接选择hexo来搭建我的博客。 安装hexo安装nodejs非常简单就略过，由于在国内使用npm（NPM是随同NodeJS一起安装的包管理工具）下载扩展速度很慢，大多数推荐使用淘宝NPM镜像替代，输入以下命令等待安装：$ npm install -g cnpm --registry=https://registry.npm.taobao.org这样就可以用cnpm代替npm命令，完在电脑上新建一个blog（自定义）文件夹,该文件夹用于存放你的博客文件,然后右键单击选择 Git Bash$ cnpm install -g hexo-cli出现的WARN可以不用理会，继续输入以下命令$ cnpm install hexo --save安装完成后，在输入命令，验证是否安装正确$ hexo -v$ hexo init #初始化每次部署的步骤，可按以下三步来进行：$ hexo clean$ hexo generate$ hexo deploy一些常用命令：$ hexo new &quot;postName&quot; #新建文章$ hexo new page &quot;pageName&quot; #新建页面$ hexo generate #生成静态页面至public目录$ hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）$ hexo deploy #将.deploy目录部署到GitHub$ hexo help #查看帮助$ hexo version #查看Hexo的版本 hexo文件结构及配置_config.yml:网站的 配置 信息，您可以在此配置大部分的参数。package.json:应用程序的信息。scaffolds:模版文件夹。当您新建文章时，Hexo会根据scaffold 来建立文件。source:资源文件夹是存放用户资源的地方。除posts文件夹之外，开头命名为(下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。themes:主题 文件夹。Hexo会根据主题来生成静态页面。 hexo渲染过滤生成静态文件过程中通过_config.yml配置中skip_render设置跳过指定文件的渲染，具体配置如下：1.如果要跳过source文件夹下的demo.html：skip_render: demo.html2.如果要忽略source下的demo文件夹下所有文件：skip_render: demo/*3.如果要忽略source下的demo文件夹下.html文件：skip_render: demo/*.html4.如果要忽略source下的demo文件夹下所有文件和目录：skip_render: demo/**5.如果要忽略多个路径的文件或目录：1234skip_render: - demo.html - demo/* - demo/** 参考零基础免费搭建个人博客hexo常用笔记献给写作者的 Markdown 新手指南]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Github搭建个人博客前的准备]]></title>
      <url>%2Fpost%2Fblog%2F2016-12-07-github-blog.html</url>
      <content type="text"><![CDATA[最近才开始想搭建自己的博客，刚刚做了个雏形出来，搭建过程中查找网上的教程很多很杂，所以我想把这整个过程自己总结一下,写点东西记录下来以便不时之需。 创建远程仓库RepositoryGithub Pages生成网站的两种方式的基本原理方式一Github 会给每个用户分配一个域名（username.github.io），有一个项目名为 username.github.io （固定格式，username与账号名一致），项目分支名为 master （默认固定），当你访问 http://username.github.io/ 时，Github 会解析该项目中分支为 master 的源代码，为你构建一个静态网站，并将生成的 index.html 展示给你。 方式二Github 还为每个项目提供了域名，创建一个名为 project （任意）的项目，项目分支名为 gh-pages （固定）。那么当你访问 http://username.github.io/project 时，Github 会去解析该项目的 gh-pages 分支下的源代码，为你构建网站。所以要搭建自己的博客你有两种选择： 建立名为 username.github.io 的项目，在 master 分支下存放网站源代码 建立名为 project 的项目，在 gh-pages 分支下存放网站源代码。 任选上面一种方式创建远程仓库 为GitHub账号添加SSH Keys（已配置过ssh的跳过）安装git客户端在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys：ls -al ~/.ssh输入以下指令（你注册Github时候的邮箱）生成新的ssh key：ssh-keygen -t rsa -C &quot;youremail@domain.com&quot;然后系统会要你输入密码：Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt;在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。在自己的目录（C:\Documents and Settings）下有一个.ssh目录，有id_rsa 私钥和id_rsa.pub公钥文件，说明成功了。接下来打开github，找到账户里面添加SSH，把idrsa.pub内容复制到key里面。使用下面的命令测试（过程中输入yes即可）ssh -T git@github.com以上就表示SSH配置好了设置Git用户名和email：git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;youremail@domain.com&quot; 参考Jekyll和Github搭建个人静态博客]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[仿苏宁首页html]]></title>
      <url>%2Fpost%2Fhtml%2F2016-11-14-suning-html.html</url>
      <content type="text"><![CDATA[闲暇时仿照着苏宁做了个首页，主要是为了熟悉一下CSS，顺便学习网站的页面结构和布局方式，网上也有很多仿照的例子，我随便找一个做参考，最后做出来还原度还是挺高的，感觉还不错（当然中间有些内容太多就偷工减料了，毕竟只是练下手）。 演示地址 源码]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[test]]></title>
      <url>%2Fpost%2Fprogramming%2F2016-11-13-test.html</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2Fpost%2Fother%2F2016-11-13-hello-world.html</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
