<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ninely的小站</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ninely.top/"/>
  <updated>2017-01-22T03:52:35.032Z</updated>
  <id>http://www.ninely.top/</id>
  
  <author>
    <name>Ninely</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP中global与$GLOBALS[&#39;&#39;]分析</title>
    <link href="http://www.ninely.top/post/php/2017-01-22-PHP-global.html"/>
    <id>http://www.ninely.top/post/php/2017-01-22-PHP-global.html</id>
    <published>2017-01-22T03:32:35.000Z</published>
    <updated>2017-01-22T03:52:35.032Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>根据官方的解释：<br>$GLOBALS[‘var’] 是外部的全局变量$var本身<br>global $var 是外部$var的同名引用</p>
</blockquote>
<a id="more"></a> 
<p>举例说明一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$var1 = 1;</div><div class="line">$var2 = 2;</div><div class="line">function test() &#123;</div><div class="line">$GLOBALS[&apos;var2&apos;] = &amp;$GLOBALS[&apos;var1&apos;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div><div class="line">echo $var2; // 输出 1</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$var1 = 1;</div><div class="line">$var2 = 2;</div><div class="line"></div><div class="line">function test()&#123;</div><div class="line">global $var1, $var2;</div><div class="line">$var2 = &amp;$var1;</div><div class="line">echo $var2;</div><div class="line">$var2 = &apos;snsgou.com&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test(); // 输出 1</div><div class="line">echo $var2; // 输出 2</div><div class="line">echo $var1; // 输出 snsgou.com</div></pre></td></tr></table></figure>
<p>test()函数中的$var1，$va2都是局部变量，只不过是加了global关键字后，分别引用指向全局变量$var1，$var2了，当 <code>$var2 = &amp;$var1</code>; 时，局部变量$var2不再指向全局变量$var2，而重新指向全局变量$var1，换句话来说，局部变量$var2的改变，不会再影响到全局变量$var2，而会影响到重新指向的全局变量$var1。 </p>
<p>我们再来看一个例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$var1 = 1;</div><div class="line">function test()&#123;</div><div class="line">unset($GLOBALS[&apos;var1&apos;]);</div><div class="line">&#125;</div><div class="line">test();</div><div class="line">echo $var1; //因为$var1被删除了，所以什么东西都没有打印。</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$var1 = 1;</div><div class="line">function test()&#123;</div><div class="line">global $var1;</div><div class="line">unset($var1);</div><div class="line">&#125;</div><div class="line">test();</div><div class="line">echo $var1; // 输出1。</div></pre></td></tr></table></figure>
<p>证明删除的只是别名，$GLOBALS[‘var’]的引用，起本身的值没有受到任何的改变。<br>也就是说 global $var 其实就是<code>$var = &amp;$GLOBALS[&#39;var&#39;]</code>。</p>
<p>如果写成如下，则会出错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$GLOBALS[&quot;var&quot;] = 1;</div><div class="line">$var = &amp;$GLOBALS[&quot;var&quot;];</div><div class="line">unset($GLOBALS[&apos;var&apos;]);</div><div class="line">echo $var; //脚本没法执行</div></pre></td></tr></table></figure></p>
<p>unset只是把只是断开了变量名和变量内容之间的绑定。这并不意味着变量内容被销毁了。<br>如果在一个函数内部给一个声明为 global 的变量赋于一个引用，该引用只在函数内部可见。可以通过使用 $GLOBALS 数组避免这一点。</p>
<p>我们都知道php中的函数所产生的变量都是函数的私有变量，那么global关键字产生的变量也肯定逃不出这个规则，global在函数产生一个指向函数外部变量的别名变量，而不是真正的函数外部变量，一但改变了别名变量的指向地址，就会发生一些意料不到情况，$GLOBALS[]确确实实调用是外部的变量，函数内外会始终保持一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = 1;</div><div class="line">$b = 2;</div><div class="line">function Sum() &#123;</div><div class="line">global $a, $b;</div><div class="line">$b = $a + $b;</div><div class="line">&#125;</div><div class="line">Sum();</div><div class="line">echo $b; // 输出3</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>怎么不是2呢，在函数外部不是不影响吗，请注意$b在函数中并没有通过引用修改，而是修改的$b指向物理内存的值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据官方的解释：&lt;br&gt;$GLOBALS[‘var’] 是外部的全局变量$var本身&lt;br&gt;global $var 是外部$var的同名引用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="http://www.ninely.top/categories/php/"/>
    
    
      <category term="php" scheme="http://www.ninely.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP大小写敏感规则</title>
    <link href="http://www.ninely.top/post/php/2017-01-02-PHP-case-sensitive.html"/>
    <id>http://www.ninely.top/post/php/2017-01-02-PHP-case-sensitive.html</id>
    <published>2017-01-02T10:45:33.000Z</published>
    <updated>2017-01-04T03:58:17.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>测试版本</li>
<li>PHP：5.6.24</li>
</ul>
</blockquote>
<h4 id="一、大小写敏感"><a href="#一、大小写敏感" class="headerlink" title="一、大小写敏感"></a>一、大小写敏感</h4><ol>
<li><p>变量名区分大小写</p>
<blockquote>
<p>所有变量均区分大小写，包括$_GET，$_POST，$_REQUEST，$_COOKIE，$_SESSION，$GLOBALS，$_SERVER，$_FILES，$_ENV 等；</p>
</blockquote>
</li>
<li><p>常量名默认区分大小写</p>
</li>
<li><p>php.ini配置项指令区分大小写</p>
</li>
<li><p>数组索引（键名）区分大小写</p>
</li>
</ol>
<a id="more"></a> 
<h4 id="二、大小写不敏感"><a href="#二、大小写不敏感" class="headerlink" title="二、大小写不敏感"></a>二、大小写不敏感</h4><ol>
<li><p>函数名、方法名、类名(包括类中方法) 不区分大小写</p>
</li>
<li><p>魔术常量不区分大小写，推荐大写</p>
</li>
<li><p>NULL、TRUE、FALSE不区分大小写</p>
</li>
<li><p>类型强制转换，不区分大小写</p>
<blockquote>
<ul>
<li>(int)，(integer) – 转换成整型</li>
<li>(bool)，(boolean) – 转换成布尔型</li>
<li>(float)，(double)，(real) – 转换成浮点型</li>
<li>(string) – 转换成字符串</li>
<li>(array) – 转换成数组</li>
<li>(object) – 转换成对象</li>
</ul>
</blockquote>
</li>
<li>命名空间不区分大小写</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;测试版本&lt;/li&gt;
&lt;li&gt;PHP：5.6.24&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、大小写敏感&quot;&gt;&lt;a href=&quot;#一、大小写敏感&quot; class=&quot;headerlink&quot; title=&quot;一、大小写敏感&quot;&gt;&lt;/a&gt;一、大小写敏感&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;变量名区分大小写&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有变量均区分大小写，包括$_GET，$_POST，$_REQUEST，$_COOKIE，$_SESSION，$GLOBALS，$_SERVER，$_FILES，$_ENV 等；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量名默认区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;php.ini配置项指令区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数组索引（键名）区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="php" scheme="http://www.ninely.top/categories/php/"/>
    
    
      <category term="php" scheme="http://www.ninely.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP utf-8等宽字符串截取</title>
    <link href="http://www.ninely.top/post/php/2016-12-31-PHP-utf8_substr.html"/>
    <id>http://www.ninely.top/post/php/2016-12-31-PHP-utf8_substr.html</id>
    <published>2016-12-31T05:30:49.000Z</published>
    <updated>2016-12-31T05:48:52.606Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>网站等宽等像素值展示内容</p>
<p>UTF-8是1-4字节变长编码，中文都是3字节，截取UTF8编码字符串从首字节开始指定宽度(非长度), 现有的函数只能使用mb_substr这样的针对编码的截取方式，但是这种处理，在全中文与全英文截取差异很大，会出现参差不齐的效果。</p>
</blockquote>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/** </div><div class="line"> * </div><div class="line"> * @param string $str   UTF-8 encoding </div><div class="line"> * @param int[option] $width 截取宽度 </div><div class="line"> * @param string[option] $end 被截取后追加的尾字符 </div><div class="line"> * @param float[option] $x3</div><div class="line"> * 3字节（中文）字符相当于希腊字母宽度的系数coefficient（小数） </div><div class="line"> * 中文通常固定用宋体,根据ascii字符字体宽度设定,不同浏览器可能会有不同显示效果 </div><div class="line"> * @return string </div><div class="line"> */ </div><div class="line"></div><div class="line">function utf8_substr($str, $width = 0, $end = &apos;...&apos;, $x3 = 0) &#123;  </div><div class="line">    global $CFG; // 全局变量保存 x3 的值  </div><div class="line">    if ($width &lt;= 0 || $width &gt;= strlen($str)) &#123;  </div><div class="line">        return $str;  </div><div class="line">    &#125;</div><div class="line">    // 中文占3个字节</div><div class="line">    $arr = str_split($str); </div><div class="line">    $len = count($arr);</div><div class="line">    // 实际字符串宽度</div><div class="line">    $strWidth = 0;</div><div class="line">    $width *= 10;  </div><div class="line">  </div><div class="line">    // 不同字节编码字符宽度系数  </div><div class="line">    $x1 = 11;   // ASCII  </div><div class="line">    $x2 = 16;  </div><div class="line">    $x3 = $x3===0 ? ( $CFG[&apos;cf3&apos;]  &gt; 0 ? $CFG[&apos;cf3&apos;]*10 : $x3 = 21 ) : $x3*10;  </div><div class="line">    $x4 = $x3;</div><div class="line">    $endStr = &apos;&apos;;</div><div class="line">    $offset = 0;</div><div class="line">    for ($offset = 0; $offset &lt; $len; $offset++) &#123;  </div><div class="line">        if ($strWidth &gt;= $width) &#123;  </div><div class="line">            $endStr = $end;  </div><div class="line">            break;  </div><div class="line">        &#125;</div><div class="line">        // 根据返回整型的 ASCII 码值判断字符宽度</div><div class="line">        $character = ord($arr[$offset]);  </div><div class="line">        if ($character &lt;= 127) &#123;  </div><div class="line">            $strWidth += $x1;  </div><div class="line">        &#125;  </div><div class="line">        elseif ($character &gt;= 192 &amp;&amp; $character &lt;= 223) &#123; // 2字节头  </div><div class="line">            $strWidth += $x2;  </div><div class="line">            $offset += 1;  </div><div class="line">        &#125;  </div><div class="line">        elseif ($character &gt;= 224 &amp;&amp; $character &lt;= 239) &#123; // 3字节头  </div><div class="line">            $strWidth += $x3;  </div><div class="line">            $offset += 2;  </div><div class="line">        &#125;  </div><div class="line">        elseif ($character &gt;= 240 &amp;&amp; $character &lt;= 247) &#123; // 4字节头  </div><div class="line">            $strWidth += $x4;  </div><div class="line">            $offset += 3;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    return implode(&apos;&apos;, array_slice($arr, 0, $offset) ). $endStr;  </div><div class="line">&#125;</div><div class="line">// test</div><div class="line">$str1 = &apos;Celine Dion My Love Ultimate Essential Collection My Heart Will Go On&apos;;</div><div class="line">$str2 = &apos;一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十&apos;;</div><div class="line">$str3 = &apos;一二dfd九十&apos;;</div><div class="line">echo &quot;&lt;br /&gt;&quot;;</div><div class="line">echo utf8_substr($str1, 10);</div><div class="line">echo &quot;&lt;hr /&gt;&quot;;</div><div class="line">echo utf8_substr($str2, 10);</div><div class="line">echo &quot;&lt;hr /&gt;&quot;;</div><div class="line">echo utf8_substr($str3, 10);</div></pre></td></tr></table></figure>
<p><a href="http://waiting.iteye.com/blog/581888" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网站等宽等像素值展示内容&lt;/p&gt;
&lt;p&gt;UTF-8是1-4字节变长编码，中文都是3字节，截取UTF8编码字符串从首字节开始指定宽度(非长度), 现有的函数只能使用mb_substr这样的针对编码的截取方式，但是这种处理，在全中文与全英文截取差异很大，会出现参差不齐的效果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="http://www.ninely.top/categories/php/"/>
    
    
      <category term="php" scheme="http://www.ninely.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2博客系统开发</title>
    <link href="http://www.ninely.top/post/yii/2016-12-30-yii-blog.html"/>
    <id>http://www.ninely.top/post/yii/2016-12-30-yii-blog.html</id>
    <published>2016-12-30T11:11:21.000Z</published>
    <updated>2017-01-03T03:10:24.018Z</updated>
    
    <content type="html"><![CDATA[<p>基于Yii2高级模板开发的博客系统，前后台模块独立，后台基本功能已完善，前台满足正常展示需求。</p>
<blockquote>
<ul>
<li>开发版本</li>
<li>Yii2：2.0.10</li>
<li>PHP：5.6.24</li>
<li>Mysql：5.6.29</li>
</ul>
</blockquote>
<img src="/img/201612302011.jpg">
<p><a href="https://github.com/ninely/yii_blog" target="_blank" rel="external">源码</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于Yii2高级模板开发的博客系统，前后台模块独立，后台基本功能已完善，前台满足正常展示需求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;开发版本&lt;/li&gt;
&lt;li&gt;Yii2：2.0.10&lt;/li&gt;
&lt;li&gt;PHP：5.6.24&lt;/li&gt;
&lt;li&gt;Mysql：5.
    
    </summary>
    
      <category term="yii" scheme="http://www.ninely.top/categories/yii/"/>
    
    
      <category term="yii" scheme="http://www.ninely.top/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>Http常用状态码</title>
    <link href="http://www.ninely.top/post/http/2016-12-15-http-status-code.html"/>
    <id>http://www.ninely.top/post/http/2016-12-15-http-status-code.html</id>
    <published>2016-12-15T10:21:11.000Z</published>
    <updated>2017-01-02T11:50:17.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>2XX：请求正常处理并返回</li>
<li>3XX：重定向，请求的资源位置发生变化</li>
<li>4XX：客户端发送的请求有错误</li>
<li>5XX：服务器端错误</li>
</ul>
</blockquote>
<p>在 HTTP API 设计中，经常用到的状态码以及它们的意义如下表：<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>状态码</th>
<th style="text-align:center">Label</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td style="text-align:center">OK</td>
<td style="text-align:left">请求成功接收并处理，一般响应中都会有 body</td>
</tr>
<tr>
<td>201</td>
<td style="text-align:center">Created</td>
<td style="text-align:left">请求已完成，并导致了一个或者多个资源被创建，最常用在 POST 创建资源的时候</td>
</tr>
<tr>
<td>202</td>
<td style="text-align:center">Accepted</td>
<td style="text-align:left">请求已经接收并开始处理，但是处理还没有完成。一般用在异步处理的情况，响应 body 中应该告诉客户端去哪里查看任务的状态</td>
</tr>
<tr>
<td>204</td>
<td style="text-align:center">No Content</td>
<td style="text-align:left">请求已经处理完成，但是没有信息要返回，经常用在 PUT 更新资源的时候（客户端提供资源的所有属性，因此不需要服务端返回）。如果有重要的 metadata，可以放到头部返回</td>
</tr>
<tr>
<td>301</td>
<td style="text-align:center">Moved Permanently</td>
<td style="text-align:left">请求的资源已经永久性地移动到另外一个地方，后续所有的请求都应该直接访问新地址。服务端会把新地址写在 Location 头部字段，方便客户端使用。允许客户端把 POST 请求修改为 GET。</td>
</tr>
<tr>
<td>304</td>
<td style="text-align:center">Not Modified</td>
<td style="text-align:left">请求的资源和之前的版本一样，没有发生改变。用来缓存资源，和条件性请求（conditional request）一起出现</td>
</tr>
<tr>
<td>307</td>
<td style="text-align:center">Temporary Redirect</td>
<td style="text-align:left">目标资源暂时性地移动到新的地址，客户端需要去新地址进行操作，但是不能修改请求的方法。</td>
</tr>
<tr>
<td>308</td>
<td style="text-align:center">Permanent Redirect</td>
<td style="text-align:left">和 301 类似，除了客户端不能修改原请求的方法</td>
</tr>
<tr>
<td>400</td>
<td style="text-align:center">Bad Requests</td>
<td style="text-align:left">客户端发送的请求有错误（请求语法错误，body 数据格式有误，body 缺少必须的字段等），导致服务端无法处理</td>
</tr>
<tr>
<td>401</td>
<td style="text-align:center">Unauthorized</td>
<td style="text-align:left">请求的资源需要认证，客户端没有提供认证信息或者认证信息不正确</td>
</tr>
<tr>
<td>403</td>
<td style="text-align:center">Forbidden</td>
<td style="text-align:left">服务器端接收到并理解客户端的请求，但是客户端的权限不足。比如，普通用户想操作只有管理员才有权限的资源。</td>
</tr>
<tr>
<td>404</td>
<td style="text-align:center">Not Found</td>
<td style="text-align:left">客户端要访问的资源不存在，链接失效或者客户端伪造 URL 的时候回遇到这个情况</td>
</tr>
<tr>
<td>405</td>
<td style="text-align:center">Method Not Allowed</td>
<td style="text-align:left">服务端接收到了请求，而且要访问的资源也存在，但是不支持对应的方法。服务端必须返回 Allow 头部，告诉客户端哪些方法是允许的</td>
</tr>
<tr>
<td>415</td>
<td style="text-align:center">Unsupported Media Type</td>
<td style="text-align:left">服务端不支持客户端请求的资源格式，一般是因为客户端在 Content-Type 或者 Content-Encoding 中申明了希望的返回格式，但是服务端没有实现。比如，客户端希望收到 xml返回，但是服务端支持 Json</td>
</tr>
<tr>
<td>429</td>
<td style="text-align:center">Too Many Requests</td>
<td style="text-align:left">客户端在规定的时间里发送了太多请求，在进行限流的时候会用到</td>
</tr>
<tr>
<td>500</td>
<td style="text-align:center">Internal Server Error</td>
<td style="text-align:left">服务器内部错误，导致无法完成请求的内容</td>
</tr>
<tr>
<td>503</td>
<td style="text-align:center">Service Unavailable</td>
<td style="text-align:left">服务器因为负载过高或者维护，暂时无法提供服务。服务器端应该返回 Retry-After 头部，告诉客户端过一段时间再来重试</td>
</tr>
</tbody>
</table>
<p>上面这些状态码覆盖了 API 设计中大部分的情况，如果对某个状态码不清楚或者希望查看更完整的列表，可以参考 <a href="https://httpstatuses.com/" target="_blank" rel="external">HTTP Status Code</a> 这个网站，或者 <a href="https://tools.ietf.org/html/rfc7231#section-6" target="_blank" rel="external">RFC7231 Response Status Codes</a> 的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;2XX：请求正常处理并返回&lt;/li&gt;
&lt;li&gt;3XX：重定向，请求的资源位置发生变化&lt;/li&gt;
&lt;li&gt;4XX：客户端发送的请求有错误&lt;/li&gt;
&lt;li&gt;5XX：服务器端错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 HTTP API 设计中，经常用到的状态码以及它们的意义如下表：&lt;br&gt;
    
    </summary>
    
      <category term="http" scheme="http://www.ninely.top/categories/http/"/>
    
    
      <category term="http" scheme="http://www.ninely.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>仿苏宁首页html</title>
    <link href="http://www.ninely.top/post/html/2016-12-14-suning-html.html"/>
    <id>http://www.ninely.top/post/html/2016-12-14-suning-html.html</id>
    <published>2016-12-14T03:46:41.000Z</published>
    <updated>2017-01-22T04:14:52.267Z</updated>
    
    <content type="html"><![CDATA[<p>闲暇时仿照着苏宁做了个首页，主要是为了熟悉一下CSS，顺便学习网站的页面结构和布局方式，网上也有很多仿照的例子，我随便找一个做参考，最后做出来还原度还是挺高的，感觉还不错（当然中间有些内容太多就偷工减料了，毕竟只是练下手）。<br><img src="/img/201612052011.png"></p>
<h4 id="演示地址-源码"><a href="#演示地址-源码" class="headerlink" title="演示地址    源码"></a><a href="http://www.ninely.top/demo/suning/index">演示地址</a>    <a href="https://github.com/ninely/Suning_html" target="_blank" rel="external">源码</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲暇时仿照着苏宁做了个首页，主要是为了熟悉一下CSS，顺便学习网站的页面结构和布局方式，网上也有很多仿照的例子，我随便找一个做参考，最后做出来还原度还是挺高的，感觉还不错（当然中间有些内容太多就偷工减料了，毕竟只是练下手）。&lt;br&gt;&lt;img src=&quot;/img/201612
    
    </summary>
    
      <category term="html" scheme="http://www.ninely.top/categories/html/"/>
    
    
      <category term="html" scheme="http://www.ninely.top/tags/html/"/>
    
      <category term="css" scheme="http://www.ninely.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>jQuery:hover延时效果的一些处理</title>
    <link href="http://www.ninely.top/post/javascript/2016-12-08-jquery-hover.html"/>
    <id>http://www.ninely.top/post/javascript/2016-12-08-jquery-hover.html</id>
    <published>2016-12-08T08:41:31.000Z</published>
    <updated>2016-12-08T09:16:21.162Z</updated>
    
    <content type="html"><![CDATA[<p>一开始鼠标的hover事件我都会用css:hover伪类来实现，它的特点也很明显，就是无延时立即触发，但有时可能会造成一些干扰，想要用户体验更好的话就要用js。<br>比如，让鼠标在元素上停留规定时间内才触发hover事件。我在一篇博文上找到一段比较好的处理代码 ：<br><a id="more"></a><br><a href="http://www.zhangxinxu.com/wordpress/?p=906" target="_blank" rel="external">文章出处</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line">    $.fn.hoverDelay = function(options)&#123;</div><div class="line">        var defaults = &#123;</div><div class="line">            // 鼠标经过的延时时间</div><div class="line">            hoverDuring: 200,</div><div class="line">            // 鼠标移出的延时时间</div><div class="line">            outDuring: 200,</div><div class="line">            // 鼠标经过执行的方法</div><div class="line">            hoverEvent: function()&#123;</div><div class="line">                // 设置为空函数，绑定的时候由使用者定义</div><div class="line">                $.noop();</div><div class="line">            &#125;,</div><div class="line">            // 鼠标移出执行的方法</div><div class="line">            outEvent: function()&#123;</div><div class="line">                $.noop();    </div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        var sets = $.extend(defaults,options || &#123;&#125;);</div><div class="line">        var hoverTimer, outTimer;</div><div class="line">        return $(this).each(function()&#123;</div><div class="line">            $(this).hover(function()&#123;</div><div class="line">                // 清除定时器</div><div class="line">                clearTimeout(outTimer);</div><div class="line">                hoverTimer = setTimeout(sets.hoverEvent,</div><div class="line">                    sets.hoverDuring);</div><div class="line">                &#125;, function()&#123;</div><div class="line">                    clearTimeout(hoverTimer);</div><div class="line">                    outTimer = setTimeout(sets.outEvent,</div><div class="line">                        sets.outDuring);</div><div class="line">                &#125;);    </div><div class="line">            &#125;);</div><div class="line">    &#125;      </div><div class="line">&#125;)(jQuery);</div><div class="line">    </div><div class="line">    // 具体使用，给id为“#test”的元素添加hoverEvent事件</div><div class="line">    $(&quot;#test&quot;).hoverDelay(&#123;</div><div class="line">        // 自定义，outEvent同</div><div class="line">        hoverEvent: function()&#123;</div><div class="line">            alert(&quot;经过我！&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>这段代码好在于把鼠标经过事件和延时分离出来，延时以及延迟的清除都交由hoverDelay来处理，具体hover事件自己自定，是一段能够很通用的代码。<br>但运用起来还有些小问题，在自定义hoverEvent、outEvent中使用this的话，它所指向的是window这个对象，而不是当前上下文，所以我改进了下，通过apply()来实现this绑定。<br>改进部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">return $(this).each(function()&#123;</div><div class="line">           // 保存当前上下文的this对象</div><div class="line">           var $this = $(this)</div><div class="line">           $this.hover(function()&#123;</div><div class="line">               clearTimeout(outTimer);</div><div class="line">               hoverTimer = setTimeout(function () &#123;</div><div class="line">                   // 调用替换</div><div class="line">                   sets.hoverEvent.apply($this);</div><div class="line">               &#125;, sets.hoverDuring);</div><div class="line">           &#125;, function()&#123;</div><div class="line">               clearTimeout(hoverTimer);</div><div class="line">               outTimer = setTimeout(function () &#123;</div><div class="line">                   sets.outEvent.apply($this);</div><div class="line">               &#125;, sets.outDuring);</div><div class="line">           &#125;);</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<p>改完以后我自己的小项目都用这个方法来处理hover或者其他的延时效果了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始鼠标的hover事件我都会用css:hover伪类来实现，它的特点也很明显，就是无延时立即触发，但有时可能会造成一些干扰，想要用户体验更好的话就要用js。&lt;br&gt;比如，让鼠标在元素上停留规定时间内才触发hover事件。我在一篇博文上找到一段比较好的处理代码 ：&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.ninely.top/categories/javascript/"/>
    
    
      <category term="js" scheme="http://www.ninely.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>hexo-next主题配置</title>
    <link href="http://www.ninely.top/post/blog/2016-12-08-hexo-next.html"/>
    <id>http://www.ninely.top/post/blog/2016-12-08-hexo-next.html</id>
    <published>2016-12-08T03:43:06.000Z</published>
    <updated>2016-12-08T05:25:12.973Z</updated>
    
    <content type="html"><![CDATA[<p>hexo还有一个好处就是拥有很多漂亮的主题，其中我选择了next，然后把配置过程中遇到的一些问题写下来备忘。</p>
<h3 id="设置「阅读全文」"><a href="#设置「阅读全文」" class="headerlink" title="设置「阅读全文」"></a>设置「阅读全文」</h3><p>有三种方式：</p>
<ol>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式</li>
<li>在文章的 front-matter 中添加 description，并提供文章摘录</li>
<li>自动形成摘要，在 主题配置文件 中添加：<img src="/img/201612081249.jpg">
</li>
</ol>
<h3 id="添加标签页（categories和tags）"><a href="#添加标签页（categories和tags）" class="headerlink" title="添加标签页（categories和tags）"></a>添加标签页（categories和tags）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ hexo new page tags</div><div class="line">$ hexo new page categories</div><div class="line">$ vim source/tags/index.md </div><div class="line">### add line: type: &quot;tags&quot;</div><div class="line">$ vim source/categories/index.md</div><div class="line">### add line: type: &quot;categories&quot;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>原理：分别在 source 下生成 tags 和 categories 文件夹，并在里面的文件中分别添加一行代码之后就可以访问 /tags/index.html 页面。<br>（如有问题可尝试一下步骤）<br>1.删除 db.json<br>2.hexo clean<br>3.hexo g</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">next官方手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo还有一个好处就是拥有很多漂亮的主题，其中我选择了next，然后把配置过程中遇到的一些问题写下来备忘。&lt;/p&gt;
&lt;h3 id=&quot;设置「阅读全文」&quot;&gt;&lt;a href=&quot;#设置「阅读全文」&quot; class=&quot;headerlink&quot; title=&quot;设置「阅读全文」&quot;&gt;&lt;/a&gt;设置「阅读全文」&lt;/h3&gt;&lt;p&gt;有三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在文章中使用 &lt;code&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt; 手动进行截断，Hexo 提供的方式&lt;/li&gt;
&lt;li&gt;在文章的 front-matter 中添加 description，并提供文章摘录&lt;/li&gt;
&lt;li&gt;自动形成摘要，在 主题配置文件 中添加：&lt;img src=&quot;/img/201612081249.jpg&quot;&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;添加标签页（categories和tags）&quot;&gt;&lt;a href=&quot;#添加标签页（categories和tags）&quot; class=&quot;headerlink&quot; title=&quot;添加标签页（categories和tags）&quot;&gt;&lt;/a&gt;添加标签页（categories和tags）&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new page tags&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new page categories&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ vim source/tags/index.md &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;### add line: type: &amp;quot;tags&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ vim source/categories/index.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;### add line: type: &amp;quot;categories&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="blog" scheme="http://www.ninely.top/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://www.ninely.top/tags/hexo/"/>
    
      <category term="next" scheme="http://www.ninely.top/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="http://www.ninely.top/post/blog/2016-12-07-hexo-blog.html"/>
    <id>http://www.ninely.top/post/blog/2016-12-07-hexo-blog.html</id>
    <published>2016-12-07T10:21:13.000Z</published>
    <updated>2016-12-08T03:45:31.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择hexo"><a href="#选择hexo" class="headerlink" title="选择hexo"></a>选择hexo</h3><p>通过 Github Pages直接写的HTML静态博客维护起来相当麻烦，相当累人，所以我在网上了解到目前一些比较流行的两个静态博客框架Jekyll和Hexo。<br>两者的区别：<br>Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。<br>Jekyll没有本地服务器，无法实现本地博文预览功能，需要上传到WEB容器中才能预览功能，而Hexo可以通过简单的命令实现本地的预览，并直接发布到WEB容器中实现同步。<br>因为我电脑上装了nodejs，就直接选择hexo来搭建我的博客。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>安装nodejs非常简单就略过，由于在国内使用npm（NPM是随同NodeJS一起安装的包管理工具）下载扩展速度很慢，大多数推荐使用淘宝NPM镜像替代，输入以下命令等待安装：<br><code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br><a id="more"></a><br>这样就可以用cnpm代替npm命令，完在电脑上新建一个blog（自定义）文件夹,该文件夹用于存放你的博客文件,然后右键单击选择 Git Bash<br><code>$ cnpm install -g hexo-cli</code><br>出现的WARN可以不用理会，继续输入以下命令<br><code>$ cnpm install hexo --save</code><br>安装完成后，在输入命令，验证是否安装正确<br><code>$ hexo -v</code><br><code>$ hexo init</code> #初始化<br>每次部署的步骤，可按以下三步来进行：<br><code>$ hexo clean</code><br><code>$ hexo generate</code><br><code>$ hexo deploy</code><br>一些常用命令：<br><code>$ hexo new &quot;postName&quot;</code> #新建文章<br><code>$ hexo new page &quot;pageName&quot;</code> #新建页面<br><code>$ hexo generate</code> #生成静态页面至public目录<br><code>$ hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><code>$ hexo deploy</code> #将.deploy目录部署到GitHub<br><code>$ hexo help</code> #查看帮助<br><code>$ hexo version</code> #查看Hexo的版本</p>
<h3 id="hexo文件结构及配置"><a href="#hexo文件结构及配置" class="headerlink" title="hexo文件结构及配置"></a>hexo文件结构及配置</h3><p><code>_config.yml</code>:网站的 配置 信息，您可以在此配置大部分的参数。<br><code>package.json</code>:应用程序的信息。<br><code>scaffolds</code>:模版文件夹。当您新建文章时，Hexo会根据scaffold 来建立文件。<br><code>source</code>:资源文件夹是存放用户资源的地方。除posts文件夹之外，开头命名为(下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。<br><code>themes</code>:主题 文件夹。Hexo会根据主题来生成静态页面。</p>
<h3 id="hexo渲染过滤"><a href="#hexo渲染过滤" class="headerlink" title="hexo渲染过滤"></a>hexo渲染过滤</h3><p>生成静态文件过程中通过_config.yml配置中<code>skip_render</code>设置跳过指定文件的渲染，具体配置如下：<br>1.如果要跳过source文件夹下的demo.html：<br><code>skip_render: demo.html</code><br>2.如果要忽略source下的demo文件夹下所有文件：<br><code>skip_render: demo/*</code><br>3.如果要忽略source下的demo文件夹下.html文件：<br><code>skip_render: demo/*.html</code><br>4.如果要忽略source下的demo文件夹下所有文件和目录：<br><code>skip_render: demo/**</code><br>5.如果要忽略多个路径的文件或目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">skip_render:</div><div class="line">    - demo.html</div><div class="line">    - demo/*</div><div class="line">    - demo/**</div></pre></td></tr></table></figure></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://hifor.net/2015/07/01/零基础免费搭建个人博客-hexo-github" target="_blank" rel="external">零基础免费搭建个人博客</a><br><a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="external">hexo常用笔记</a><br><a href="http://www.jianshu.com/p/q81RER#" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择hexo&quot;&gt;&lt;a href=&quot;#选择hexo&quot; class=&quot;headerlink&quot; title=&quot;选择hexo&quot;&gt;&lt;/a&gt;选择hexo&lt;/h3&gt;&lt;p&gt;通过 Github Pages直接写的HTML静态博客维护起来相当麻烦，相当累人，所以我在网上了解到目前一些比较流行的两个静态博客框架Jekyll和Hexo。&lt;br&gt;两者的区别：&lt;br&gt;Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。&lt;br&gt;Jekyll没有本地服务器，无法实现本地博文预览功能，需要上传到WEB容器中才能预览功能，而Hexo可以通过简单的命令实现本地的预览，并直接发布到WEB容器中实现同步。&lt;br&gt;因为我电脑上装了nodejs，就直接选择hexo来搭建我的博客。&lt;/p&gt;
&lt;h3 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h3&gt;&lt;p&gt;安装nodejs非常简单就略过，由于在国内使用npm（NPM是随同NodeJS一起安装的包管理工具）下载扩展速度很慢，大多数推荐使用淘宝NPM镜像替代，输入以下命令等待安装：&lt;br&gt;&lt;code&gt;$ npm install -g cnpm --registry=https://registry.npm.taobao.org&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://www.ninely.top/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://www.ninely.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github搭建个人博客前的准备</title>
    <link href="http://www.ninely.top/post/blog/2016-12-07-github-blog.html"/>
    <id>http://www.ninely.top/post/blog/2016-12-07-github-blog.html</id>
    <published>2016-12-07T08:21:13.000Z</published>
    <updated>2016-12-08T05:29:55.373Z</updated>
    
    <content type="html"><![CDATA[<p>最近才开始想搭建自己的博客，刚刚做了个雏形出来，搭建过程中查找网上的教程很多很杂，所以我想把这整个过程自己总结一下,写点东西记录下来以便不时之需。</p>
<h2 id="创建远程仓库Repository"><a href="#创建远程仓库Repository" class="headerlink" title="创建远程仓库Repository"></a>创建远程仓库Repository</h2><h3 id="Github-Pages生成网站的两种方式的基本原理"><a href="#Github-Pages生成网站的两种方式的基本原理" class="headerlink" title="Github Pages生成网站的两种方式的基本原理"></a>Github Pages生成网站的两种方式的基本原理</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>Github 会给每个用户分配一个域名（username.github.io），有一个项目名为 username.github.io （固定格式，username与账号名一致），项目分支名为 master （默认固定），当你访问 <code>http://username.github.io/</code> 时，Github 会解析该项目中分支为 master 的源代码，为你构建一个静态网站，并将生成的 index.html 展示给你。</p>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>Github 还为每个项目提供了域名，创建一个名为 project （任意）的项目，项目分支名为 gh-pages （固定）。那么当你访问 <code>http://username.github.io/project</code> 时，Github 会去解析该项目的 gh-pages 分支下的源代码，为你构建网站。<br><a id="more"></a><br>所以要搭建自己的博客你有两种选择：</p>
<ol>
<li>建立名为 username.github.io 的项目，在 master 分支下存放网站源代码</li>
<li>建立名为 project 的项目，在 gh-pages 分支下存放网站源代码。</li>
</ol>
<p>任选上面一种方式创建远程仓库</p>
<h2 id="为GitHub账号添加SSH-Keys"><a href="#为GitHub账号添加SSH-Keys" class="headerlink" title="为GitHub账号添加SSH Keys"></a>为GitHub账号添加SSH Keys</h2><p>（已配置过ssh的跳过）<br>安装git客户端<br>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys：<br><code>ls -al ~/.ssh</code><br>输入以下指令（你注册Github时候的邮箱）生成新的ssh key：<br><code>ssh-keygen -t rsa -C &quot;youremail@domain.com&quot;</code><br>然后系统会要你输入密码：<br><code>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</code><br><code>Enter same passphrase again:&lt;再次输入加密串&gt;</code><br>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br>在自己的目录（C:\Documents and Settings）下有一个.ssh目录，有id_rsa 私钥和id_rsa.pub公钥文件，说明成功了。<br><img src="/img/201612071949.jpg"><br>接下来打开github，找到账户里面添加SSH，把idrsa.pub内容复制到key里面。<br>使用下面的命令测试（过程中输入yes即可）<br><code>ssh -T git@github.com</code><br>以上就表示SSH配置好了<br>设置Git用户名和email：<br><code>git config --global user.name &quot;Your Name&quot;</code><br><code>git config --global user.email &quot;youremail@domain.com&quot;</code></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://pwnny.cn/original/2016/06/26/MakeBlog.html" target="_blank" rel="external">Jekyll和Github搭建个人静态博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近才开始想搭建自己的博客，刚刚做了个雏形出来，搭建过程中查找网上的教程很多很杂，所以我想把这整个过程自己总结一下,写点东西记录下来以便不时之需。&lt;/p&gt;
&lt;h2 id=&quot;创建远程仓库Repository&quot;&gt;&lt;a href=&quot;#创建远程仓库Repository&quot; class=&quot;headerlink&quot; title=&quot;创建远程仓库Repository&quot;&gt;&lt;/a&gt;创建远程仓库Repository&lt;/h2&gt;&lt;h3 id=&quot;Github-Pages生成网站的两种方式的基本原理&quot;&gt;&lt;a href=&quot;#Github-Pages生成网站的两种方式的基本原理&quot; class=&quot;headerlink&quot; title=&quot;Github Pages生成网站的两种方式的基本原理&quot;&gt;&lt;/a&gt;Github Pages生成网站的两种方式的基本原理&lt;/h3&gt;&lt;h4 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h4&gt;&lt;p&gt;Github 会给每个用户分配一个域名（username.github.io），有一个项目名为 username.github.io （固定格式，username与账号名一致），项目分支名为 master （默认固定），当你访问 &lt;code&gt;http://username.github.io/&lt;/code&gt; 时，Github 会解析该项目中分支为 master 的源代码，为你构建一个静态网站，并将生成的 index.html 展示给你。&lt;/p&gt;
&lt;h4 id=&quot;方式二&quot;&gt;&lt;a href=&quot;#方式二&quot; class=&quot;headerlink&quot; title=&quot;方式二&quot;&gt;&lt;/a&gt;方式二&lt;/h4&gt;&lt;p&gt;Github 还为每个项目提供了域名，创建一个名为 project （任意）的项目，项目分支名为 gh-pages （固定）。那么当你访问 &lt;code&gt;http://username.github.io/project&lt;/code&gt; 时，Github 会去解析该项目的 gh-pages 分支下的源代码，为你构建网站。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://www.ninely.top/categories/blog/"/>
    
    
      <category term="git" scheme="http://www.ninely.top/tags/git/"/>
    
      <category term="github" scheme="http://www.ninely.top/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://www.ninely.top/post/programming/2016-11-13-test.html"/>
    <id>http://www.ninely.top/post/programming/2016-11-13-test.html</id>
    <published>2016-11-13T12:39:45.000Z</published>
    <updated>2016-11-13T12:40:10.072Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="programming" scheme="http://www.ninely.top/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.ninely.top/post/other/2016-11-13-hello-world.html"/>
    <id>http://www.ninely.top/post/other/2016-11-13-hello-world.html</id>
    <published>2016-11-13T10:12:04.747Z</published>
    <updated>2016-11-15T01:26:53.535Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="other" scheme="http://www.ninely.top/categories/other/"/>
    
    
      <category term="other" scheme="http://www.ninely.top/tags/other/"/>
    
  </entry>
  
</feed>
